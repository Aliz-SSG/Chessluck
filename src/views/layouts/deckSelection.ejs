<!DOCTYPE html>
<html lang="en">
<head>
    <%- include ('../partials/messages.ejs')-%>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Deck Selection</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #111827 0%, #1F2937  100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }

        .header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #60A5FA
            ;
            letter-spacing: -0.5px;
            margin-bottom: 0.5rem;
        }

        .subtitle {
            font-size: 1.1rem;
            color: #60A5FA
            ;
            font-weight: 400;
        }

        .decks-container {
            display: flex;
            gap: 2rem;
            margin-bottom: 3rem;
            flex-wrap: wrap;
            justify-content: center;
        }

        .deck-card {
            background: white;
            border-radius: 1.5rem;
            padding: 2rem;
            width: 280px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid transparent;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .deck-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
        }

        .deck-card.selected {
            border-color: #3b82f6;
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.25);
            transform: translateY(-8px) scale(1.02);
        }

        .deck-card.selected::before {
            content: '';
            position: absolute;
            top: -8px;
            right: -8px;
            width: 24px;
            height: 24px;
            background: #3b82f6;
            border-radius: 50%;
            border: 3px solid white;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .deck-card.selected::after {
            content: 'âœ“';
            position: absolute;
            top: -4px;
            right: 2px;
            color: white;
            font-size: 14px;
            font-weight: bold;
        }

        .deck-preview {
            display: flex;
            gap: 0.75rem;
            margin: 1.5rem 0;
            flex-wrap: wrap;
            justify-content: center;
        }

        .piece {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            background: #60A5FA
            ;
            border-radius: 10px;
            transition: transform 0.2s ease;
        }

        .piece:hover {
            transform: scale(1.1);
        }

        .deck-info {
            text-align: center;
        }

        .deck-name {
            font-size: 1.4rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .deck-description {
            font-size: 0.95rem;
            color: #64748b;
            line-height: 1.4;
        }

        .confirm-button {
            background: #60A5FA
            ;
            color: white;
            border: none;
            border-radius: 1.5rem;
            padding: 1.25rem 3rem;
            font-size: 1.25rem;
            font-weight: 600;
            cursor: not-allowed;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .confirm-button.enabled {
            background: #60A5FA;
            cursor: pointer;
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
        }

        .confirm-button.enabled:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 30px rgba(59, 130, 246, 0.4);
        }

        .confirm-button.enabled:active {
            transform: translateY(0);
        }

        .status-text {
            margin-top: 1.5rem;
            color: #ffffff;
            font-size: 1rem;
            text-align: center;
        }

        @media (max-width: 768px) {
            .decks-container {
                flex-direction: column;
                align-items: center;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Select Your Deck</h1>
        <p class="subtitle">Choose a chess piece set for your game</p>
    </div>

        </div><div class="decks-container">
            <% decks.forEach(deck => { %>
                <div class="deck-card" data-deck="<%= deck._id %>">
                    <div class="deck-info">
                        <h2 class="deck-name"><%= deck.name %></h2>
                        <p class="deck-description"><%= deck.description || 'Custom deck' %></p>
                    </div>
                    <!-- <div class="deck-preview">
                        <% deck.pieces.forEach(piece => { %>
                            <div class="piece"><%= piece %></div>
                        <% }) %>
                    </div> -->
                </div>
            <% }) %>
        </div>
        

    <button class="confirm-button" id="confirmBtn">Confirm Selection</button>
    <p class="status-text" id="statusText">Both players must select their decks to continue</p>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const socket = io();
            // Register user to receive events
            <% if (typeof currentUserId !== 'undefined') { %>
            socket.emit('registerUser', '<%= currentUserId %>');
            <% } %>

            // If both decks selected anywhere, redirect to game page
            socket.on('bothDecksSelected', function(data) {
                if (data && data.gameId) {
                    window.location.href = `/game/${data.gameId}`;
                }
            });

            const deckCards = document.querySelectorAll('.deck-card');
            const confirmBtn = document.getElementById('confirmBtn');
            const statusText = document.getElementById('statusText');
            let selectedDeck = null;

            deckCards.forEach(card => {
                card.addEventListener('click', function() {
                    // Remove selection from all cards
                    deckCards.forEach(c => c.classList.remove('selected'));
                    
                    // Add selection to clicked card
                    this.classList.add('selected');
                    
                    // Update selected deck
                    selectedDeck = this.dataset.deck;
                    
                    // Enable confirm button
                    confirmBtn.classList.add('enabled');
                    confirmBtn.disabled = false;
                });

                // Add hover effect
                card.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('selected')) {
                        this.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.12)';
                    }
                });

                card.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('selected')) {
                        this.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.08)';
                    }
                });
            });

            confirmBtn.addEventListener('click', async function() {
                if (selectedDeck) {
                    confirmBtn.disabled = true;
                    confirmBtn.classList.remove('enabled');
                    statusText.textContent = 'Saved. Waiting for opponent to select...';

                    try {
                        const resp = await fetch(`/game/<%= gameId %>/deck-selection`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                            body: new URLSearchParams({ selectedDeck })
                        });
                        // We rely on socket event to redirect when both are ready
                    } catch (e) {
                        console.error('Failed saving deck', e);
                        statusText.textContent = 'Failed to save deck. Please try again.';
                        confirmBtn.disabled = false;
                        confirmBtn.classList.add('enabled');
                    }
                }
            });
        });
    </script>
</body>
</html>