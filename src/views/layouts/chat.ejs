<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ChessLuck Chat</title>
  <link rel="icon" type="image/x-icon" href="/images/faveicon.ico" />
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    .chat-container {
      height: calc(100vh - 160px);
    }
    .message-bubble {
      max-width: 90%;
      word-wrap: break-word;
      white-space: pre-wrap;
    }
  </style>
</head>
<body class="bg-gray-900 text-gray-100">
  <!-- Inject currentUser and friend into JS -->
  <script>
    const currentUser = {
      _id: "<%= currentUser._id %>",
      pfp: "<%= currentUser.pfp || '/images/default-pfp.png' %>"
    };
    const friend = {
      _id: "<%= friend._id %>",
      pfp: "<%= friend.pfp || '/images/default-pfp.png' %>"
    };
  </script>

  <!-- Navigation -->
  <nav class="bg-gray-800 border-b border-gray-700 py-4 px-6">
    <div class="max-w-7xl mx-auto flex justify-between items-center">
      <div class="flex items-center space-x-2">
        <i class="fas fa-chess-queen text-blue-400 text-2xl"></i>
        <span class="text-xl font-bold text-indigo-400"><a href="/">ChessLuck Chat</a></span>
      </div>
      <div class="flex space-x-6">
        <a href="/" class="hover:text-blue-400">Home</a>
        <a href="/play" class="hover:text-blue-400">Play</a>
        <a href="/learn" class="hover:text-blue-400">Learn</a>
        <a href="/friends" class="hover:text-blue-400">Friends</a>
      </div>
    </div>
  </nav>

  <!-- Chat Container -->
  <div class="max-w-4xl mx-auto px-4 py-6">
    <!-- Friend Info -->
    <div class="flex items-center mb-6 p-4 bg-gray-800 rounded-lg">
      <img src="<%= friend.pfp || '/images/default-pfp.png' %>" class="w-12 h-12 rounded-full border-2 border-blue-500" alt="friend" />
      <div class="ml-4">
        <h3 class="font-bold text-lg"><%= friend.username %></h3>
        <p class="text-gray-400 text-sm">
          <%= friend.online ? "Online" : "Offline" %>
          <% if (friend.online) { %>
            <span class="w-2 h-2 inline-block rounded-full bg-green-500 ml-1"></span>
          <% } %>
        </p>
      </div>
    </div>

    <!-- Messages Container -->
    <div id="messages" class="chat-container overflow-y-auto mb-4 p-4 bg-gray-800 rounded-lg shadow-inner scroll-pb-24">
      <div class="space-y-4" id="message-list">
        <% if (messages && messages.length > 0) { %>
          <% messages.forEach(msg => { %>
            <% const isCurrentUser = msg.sender.toString() === currentUser._id.toString(); %>
            <div class="flex items-start <%= isCurrentUser ? 'justify-end' : '' %>">
              <% if (!isCurrentUser) { %>
                <img src="<%= friend.pfp || '/images/default-pfp.png' %>" class="w-8 h-8 rounded-full mt-1 mr-3" alt="friend" />
              <% } %>
              <div class="<%= isCurrentUser ? 'text-right' : '' %>">
                <div class="<%= isCurrentUser ? 'bg-blue-600 text-white rounded-l-lg rounded-br-lg' : 'bg-gray-700 text-gray-100 rounded-r-lg rounded-bl-lg' %> px-4 py-2 message-bubble inline-block">
                  <%= msg.text %>
                </div>
                <p class="text-xs text-gray-500 mt-1 <%= isCurrentUser ? 'mr-1' : 'ml-1' %>">
                  <%= msg.time.toLocaleString ? msg.time.toLocaleString() : msg.time %>
                </p>
              </div>
              <% if (isCurrentUser) { %>
                <img src="<%= currentUser.pfp || '/images/default-pfp.png' %>" class="w-8 h-8 rounded-full mt-1 ml-3" alt="You" />
              <% } %>
            </div>
          <% }) %>
        <% } else { %>
          <p id="empty-prompt" class="text-gray-500 text-center">No messages yet. Start the conversation!</p>
        <% } %>
      </div>
    </div>

    <!-- Message Input -->
    <form id="chat-form" class="flex items-center bg-gray-800 rounded-lg p-3">
      <button type="button" class="text-gray-400 hover:text-blue-400 p-2 mr-2" aria-label="Add Emoji">
        <i class="far fa-smile"></i>
      </button>
      <input id="message-input" type="text" placeholder="Type your message..." class="message-input flex-grow bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" required />
      <button type="submit" class="ml-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-4 py-2 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed" aria-label="Send Message">
        <i class="fas fa-paper-plane"></i>
      </button>
    </form>
  </div>

  <!-- Socket.IO -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const socket = io();
      const form = document.getElementById("chat-form");
      const input = document.getElementById("message-input");
      const messages = document.getElementById("message-list");

      // Join the specific chat room
      socket.emit('joinChat', {
        currentUserId: currentUser._id,
        friendId: friend._id
      });

      function scrollToBottom() {
        const messagesContainer = document.getElementById("messages");
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      function renderMessage({ text, time, senderId }) {
        const isCurrentUser = senderId === currentUser._id;

        // Remove "No messages yet" prompt if present
        const emptyPrompt = document.getElementById("empty-prompt");
        if (emptyPrompt) emptyPrompt.remove();

        const wrapper = document.createElement("div");
        wrapper.className = "flex items-start " + (isCurrentUser ? "justify-end" : "");

        const avatar = document.createElement("img");
        avatar.src = isCurrentUser ? currentUser.pfp : friend.pfp;
        avatar.className = "w-8 h-8 rounded-full mt-1 " + (isCurrentUser ? "ml-3" : "mr-3");
        avatar.alt = isCurrentUser ? "You" : "Friend";

        const bubble = document.createElement("div");
        bubble.className = (isCurrentUser
          ? "bg-blue-600 text-white rounded-l-lg rounded-br-lg"
          : "bg-gray-700 text-gray-100 rounded-r-lg rounded-bl-lg") + " px-4 py-2 message-bubble inline-block";
        bubble.textContent = text;

        const timestamp = document.createElement("p");
        timestamp.className = "text-xs text-gray-500 mt-1 " + (isCurrentUser ? "mr-1 text-right" : "ml-1");
        timestamp.textContent = new Date(time).toLocaleString();

        const messageBlock = document.createElement("div");
        if (isCurrentUser) messageBlock.className = "text-right";
        messageBlock.appendChild(bubble);
        messageBlock.appendChild(timestamp);

        if (isCurrentUser) {
          wrapper.appendChild(messageBlock);
          wrapper.appendChild(avatar);
        } else {
          wrapper.appendChild(avatar);
          wrapper.appendChild(messageBlock);
        }

        messages.appendChild(wrapper);
        scrollToBottom();
      }

      form.addEventListener("submit", (e) => {
        e.preventDefault();
        const msg = input.value.trim();
        if (!msg) return;

        // Disable form while sending
        const submitBtn = form.querySelector('button[type="submit"]');
        submitBtn.disabled = true;

        const messageData = {
          text: msg,
          time: new Date(),
          senderId: currentUser._id,
          receiverId: friend._id
        };

        socket.emit("chatMessage", messageData);
        input.value = "";
        
        // Re-enable form after a short delay
        setTimeout(() => {
          submitBtn.disabled = false;
        }, 500);
      });

      // Handle Enter key for sending messages
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          form.dispatchEvent(new Event('submit'));
        }
      });

      socket.on("chatMessage", (msg) => {
        renderMessage(msg);
      });

      // Error handling
      socket.on('connect_error', (error) => {
        console.error('Socket connection error:', error);
        showNotification('Connection error. Trying to reconnect...', 'error');
      });

      socket.on('error', (error) => {
        console.error('Socket error:', error);
        showNotification('Socket error occurred', 'error');
      });

      socket.on('disconnect', () => {
        console.log('Disconnected from server');
        showNotification('Disconnected from server', 'warning');
      });

      socket.on('reconnect', () => {
        console.log('Reconnected to server');
        showNotification('Reconnected to server', 'success');
      });

      function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
          type === 'error' ? 'bg-red-600' : 
          type === 'warning' ? 'bg-yellow-600' : 
          type === 'success' ? 'bg-green-600' : 'bg-blue-600'
        } text-white`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      }
    });
  </script>
</body>
</html>
