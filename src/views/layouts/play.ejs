<!DOCTYPE html>
<html lang="en">
  <%- include ('../partials/messages.ejs')-%>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Game â€” <%= gameId %></title>

  <!-- Tailwind (play CDN, fine for dev) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="icon" type="image/x-icon" href="/images/faveicon.ico">
  
  <!-- icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>

  <style>
    :root{
      --bg-900:#0b1220;
      --muted:#94a3b8;
      --accent:#60A5FA;
    }
    html,body{height:100%;margin:0;background:linear-gradient(180deg,var(--bg-900),#07101a);color:#e6eef8;font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial}
    .bg-layer{position:fixed;inset:0;z-index:0;pointer-events:none;mix-blend-mode:screen;opacity:0.18}
    .bg-gradient{position:absolute;inset:-10%  -10% ;background:linear-gradient(120deg, rgba(96,165,250,0.14), rgba(59,130,246,0.08) 40%, rgba(148,163,184,0.04));filter:blur(40px);transform:translateZ(0);animation:shift 14s linear infinite}
    @keyframes shift{0%{transform:translate(-6%,-3%)}50%{transform:translate(6%,3%)}100%{transform:translate(-6%,-3%)}}
    #particles{position:absolute;inset:0;z-index:1}
    .app{position:relative;z-index:2;min-height:100vh;display:flex;align-items:flex-start;justify-content:center;padding:28px;box-sizing:border-box}
    .container{width:1140px;max-width:95%;display:grid;grid-template-columns:640px 1fr;gap:20px}
    .panel{background:rgba(255,255,255,0.02);border:1px solid rgba(255,255,255,0.03);backdrop-filter:blur(6px);border-radius:12px;padding:14px;box-shadow:0 6px 20px rgba(2,6,23,0.6)}
    #board { width:600px; height:600px; border-radius:10px; overflow:hidden; background:linear-gradient(180deg,#0f1724,#07101a); box-shadow:0 10px 30px rgba(2,6,23,0.7); }
    .move-row{display:flex;gap:8px;margin-bottom:6px;align-items:center}
    .move-number{color:var(--muted);width:30px;text-align:right}
    .move-cell{background:rgba(255,255,255,0.03);padding:8px 10px;border-radius:8px;color:#dbeafe;font-weight:600}
    @media (max-width:1000px){.container{grid-template-columns:1fr}#board{width:90vw;height:90vw}}
  </style>
</head>

<body>
  <div class="bg-layer" aria-hidden="true">
    <div class="bg-gradient"></div>
    <canvas id="particles"></canvas>
  </div>

  <div class="app">
    <div class="container">
      <!-- LEFT -->
      <section class="panel">
        <div class="flex justify-between items-center mb-3">
          <div>
            <div class="font-bold text-lg">Live Match</div>
            <div class="text-sm text-gray-400">Game ID: <span id="roomId"><%= gameId %></span></div>
          </div>
          <div class="flex gap-2 items-center">
            <button id="flipBtn" class="px-3 py-2 rounded bg-transparent border border-white/6 text-sm">Flip</button>
            <button id="resignBtn" class="px-3 py-2 rounded bg-red-600 text-sm">Resign</button>
          </div>
        </div>

        <div id="board" class="mx-auto"></div>

        <div class="flex justify-between mt-4 items-center">
          <div class="text-sm text-gray-300" id="statusText">Waiting for server...</div>
          <div class="flex gap-2">
            <button id="offerDrawBtn" class="px-3 py-2 rounded bg-gray-700 text-sm">Offer Draw</button>
            <button id="takeBackBtn" class="px-3 py-2 rounded bg-gray-700 text-sm">Offer Takeback</button>
          </div>
        </div>
      </section>

      <!-- RIGHT -->
      <aside class="flex flex-col gap-4">
        <!-- Players -->
        <div class="panel flex items-center justify-between">
          <div class="flex items-center gap-3">
            <img src="<%= player1.avatar %>" alt="p1" class="w-12 h-12 rounded-md object-cover" />
            <div>
              <div class="font-semibold"><%= player1.username %></div>
              <div class="text-sm text-gray-400">Rating <%= player1.rating %></div>
            </div>
          </div>
          <div class="text-sm bg-green-800 px-3 py-1 rounded">White</div>
        </div>

        <div class="panel flex items-center justify-between">
          <div class="flex items-center gap-3">
            <img src="<%= player2.avatar %>" alt="p2" class="w-12 h-12 rounded-md object-cover" />
            <div>
              <div class="font-semibold"><%= player2.username %></div>
              <div class="text-sm text-gray-400">Rating <%= player2.rating %></div>
            </div>
          </div>
          <div class="text-sm bg-blue-800 px-3 py-1 rounded">Black</div>
        </div>

        <!-- Move list -->
        <div class="panel">
          <div class="flex justify-between items-center mb-2">
            <div class="font-semibold">Move List</div>
            <div class="text-sm text-gray-400">Auto-scroll</div>
          </div>
          <div id="moves" class="overflow-y-auto max-h-72 pr-2">
            <% if (moves && moves.length) { %>
              <% for (let i = 0; i < moves.length; i += 2) { %>
                <div class="move-row">
                  <div class="move-number"><%= (i/2)+1 %>.</div>
                  <div class="move-cell"><%= moves[i] %></div>
                  <div class="move-cell"><%= moves[i+1] || '' %></div>
                </div>
              <% } %>
            <% } else { %>
              <div class="text-sm text-gray-400">No moves yet</div>
            <% } %>
          </div>
        </div>

        <!-- Chat -->
        <div class="panel flex flex-col">
          <div class="font-semibold mb-2">Chat</div>
          <div id="chatWindow" class="flex-1 overflow-y-auto space-y-2 pb-2">
            <% if (chat && chat.length) { %>
              <% chat.forEach(m => { %>
                <div class="<%= (m.senderId == currentUserId) ? 'text-right' : 'text-left' %>">
                  <span class="inline-block bg-gray-800 px-3 py-1 rounded"><%= m.text %></span>
                </div>
              <% }) %>
            <% } %>
          </div>

          <form id="chatForm" class="mt-2 flex gap-2" onsubmit="return false;">
            <input id="chatInput" class="flex-1 bg-transparent border border-white/6 rounded px-3 py-2 text-sm focus:outline-none" placeholder="Type a message..." />
            <button id="sendChatBtn" class="bg-indigo-600 px-4 py-2 rounded">Send</button>
          </form>
        </div>
      </aside>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/chess.js"></script>
  <script src="/js/chessboard.js"></script>


  
  <script>
    window.GAME_DATA = {
      gameId: "<%= gameId %>",
      currentUserId: "<%= currentUserId %>",
      player1: <%- JSON.stringify(player1 || {}) %>,
      player2: <%- JSON.stringify(player2 || {}) %>,
      initialFen: <%- JSON.stringify(initialFen || null) %>,
      initialMoves: <%- JSON.stringify(moves || []) %>
    };
  
    const { gameId, currentUserId, player1, player2, initialFen, initialMoves } = window.GAME_DATA;
    const amWhite = currentUserId == player1._id;
    const orientation = amWhite ? 'white' : 'black';
  
    const socket = io();
    const chess = new Chess();
  
    if (initialFen && initialFen.length) {
      try { chess.load(initialFen); } 
      catch (e) { console.warn('invalid initialFen', e); chess.reset(); }
    } else {
      chess.reset();
    }
    window.__chess = chess;
  
    const clientMoves = Array.from(initialMoves);
  
    function appendMoveSAN(san) {
      clientMoves.push(san);
      const movesEl = document.getElementById('moves');
      const idx = clientMoves.length - 1;
      if (idx % 2 === 0) {
        const row = document.createElement('div'); row.className = 'move-row';
        const num = document.createElement('div'); num.className = 'move-number'; num.textContent = Math.floor(idx / 2) + 1 + '.';
        const wcell = document.createElement('div'); wcell.className = 'move-cell'; wcell.textContent = san;
        const bcell = document.createElement('div'); bcell.className = 'move-cell'; bcell.textContent = '';
        row.appendChild(num); row.appendChild(wcell); row.appendChild(bcell);
        movesEl.appendChild(row);
      } else {
        const rows = movesEl.querySelectorAll('.move-row');
        if (rows.length) rows[rows.length - 1].querySelectorAll('.move-cell')[1].textContent = san;
      }
      movesEl.scrollTop = movesEl.scrollHeight;
    }
  
    // Define config BEFORE creating the board
    const boardConfig = {
      draggable: true,
      position: chess.fen(),
      orientation: orientation,
      onDragStart: (source, piece) => {
        const turnColor = chess.turn() === 'w' ? 'w' : 'b';
        if (turnColor !== (amWhite ? 'w' : 'b')) return false; // only allow move if your turn},

      },
      onDrop: (source, target) => {
        const move = chess.move({ from: source, to: target, promotion: 'q' });
        if (move === null) return 'snapback';
        board.position(chess.fen());
        socket.emit('playerMove', { gameId, from: source, to: target, fen: chess.fen() });
      },
      onSnapEnd: () => { board.position(chess.fen()); },
      pieceTheme: function (piece) {
        return 'https://cdnjs.cloudflare.com/ajax/libs/chessboardjs/1.0.0/img/chesspieces/wikipedia/' + piece.toLowerCase() + '.png';
}

    };
  
    // NOW create the board
    const board = Chessboard('board', boardConfig);
  </script>
  

</body>
</html>
